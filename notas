cd src/
make all_bin -> make all

cd ../num
/probsemSharedMemSoccerGame


outras cenas:

(R)eferee - inicia o jogo, tem que haver 1 para se iniciar, e é quem termina, 
                    depois de assegurar que todos os jogadores já iniciaram

cada equipa:
4 (P)layers
1 (G)oalies


if players or goalies > total, avisar atrasados e não entram

P G e R - processos independentes
        - comunicam através de semáforos e memória partilhada
        - criados a partir de probSemSharedMemSoccerGame e existem desde aí
        - tempo de chegada = distribuição de prob. uniforme
        - processos devem bloquear para esperar por algum evento

ficheiros a alterar:
        - semSharedMemPlayer.c
        - semSharedMemGoalie.c
        - semSharedMemReferee.c

(F)orming

Estados
    Goalies < 2 **
 A ------------> W      -> SemDown(..., goaliesWaitTeam)
|  \ *                     SemUp(..., playerRegisted)
|>2  \ = 2
L     |-> F <-|
          |   |
           Not|All Team | Team Complete
          |-> |waiting  | SemUp(..., playersWaitTeam)
                        | SemDown(..., playersRegister)
                        
        * and All Team Complete
       ** or Not All Teams 

Avaliação:
    - Relatório denovo ffs
    - valoriza-se deteção de erros, verificação dos valores dos semáforos (semup e semdown)
